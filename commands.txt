(workin directory) -> (index)-> (repository)

git config -h
git config --list   : show config
git config --system user.name "alex"

git config  --global alias.c config

git config  --global alias.commitall "git add .;git commit"
-----------------------------------------
git config --global — позволяет настроить параметры Git глобально, для всех репозиториев пользователя.
alias.c — определяет новый алиас с именем c.
config — указывает, что алиас c будет выполнять команду git config.

git init
git status
git add .
git add -f ./ == добавить все равно не смотря на 

git show --pretty=fuller
git commit --author='Alexx' --date="..."
git commit -am "...."
git commit -m "...." index.html закомитеть конкретный файл


git rm i.gitignore = rm gitignore+ git add
git rm  --cached i.gitignore удалить из индекса  не удалять из каталога

git branch -v

git branch feature : создать ветку

git checkout -b feature : создать ветку и переключиться на нее
git checkout -f feature : переключает на ветку не сохраняя измененные данные в другой ветке
git checkout -f HEAD : очистить все изменения
git stach : сохранить изменения чтоб можно было переключиться
git stach pop  : восстановить измененые данные
---------------------------------------------------------------------------
git branch -f master  642ac75 : переместить master на коомит 642ac75
git checkout -B master  642ac75 : переместить master на коомит 642ac75

git checkout c2452e5 commands.txt для просмотра файла в предыдущей версии

git checkout HEAD commands.txt возвращает фал из репозитория
git checkout commands.txt возвращает фаил из индекса
---------------------------------------------------------------------------------
git log --oneline
git show HEAD~~ посмотреть историю старых файлов(2 коммита назад)
git show HEAD~4   (4 коммита назад)
git show @~3      (3 коммита назад)

git show master~3  (3 коммита назад)

git show @~:command.txt

git show :command.txt посмотреть что в индексе если поменя ли основной файл

-----------------------------------------------------------------------------
cat .git/ORIG_HEAD 
git merge fix                       (слияние)
git checkout -B master fix

git branch -f master ORIG_HEAD

git branch -d fix (удаление)
git branch -D feature (удаление принудительное если ветка не слита)
git branch -b feature C2d5 (Востановление)

------------------------------------------------------------------------------
cat ./git/logs/HEAD
git reflog master (история переключения веток)
git reflog --date=iso

git log --oneline -g
git branch fix HEAD@{18} востановление ветки
git checkout - (переход на прошлую ветку)

------------------------------4.1 Git – Удаление "лишних" файлов и незакоммиченных изменений--------------
git checkout -f (востановить отслеживаемы фалы )
git reset --hard

git clean -dxf (удалить не отслеживаемы файлы)

--------------------------------5.1 Git – Reset – Жесткий reset --hard: отмена изменений, удаление коммитов

git reset --hard @~   (workDir+  Index+  Repo+)
git reflog (4536 )
git reset --hard 4536 

git reset  @~   (workDir  Index+  Repo+)

git reset --soft @~   (workDir  Index  Repo+)
git add .
git commit 

---------------------------------6.1 Git – Просмотр – Сравнение коммитов, веток и не только: git diff-----------
git diff                        (отличие workDir и Index)
git diff @                      (отличие workDir и Repo)
git diff --cached               (отличие Index и Repo)
git diff @~1                    (отличие master и прошлый коммит)
git diff fix                    (отличие master и fix)
git diff fix1..fix              (отличие fix1 и fix)
git diff fix1...fix             (отличие fix1 и fix и общего предка)
git diff fix1:paht1 fix:path1   (отличие фйалов из коммитов)

6.2 Git – Просмотр – Вывод истории: git log, форматирование коммитов

git log --pretty=format:"%h %ad | %s" --date=short
git log master
git log fix..master --oneline 
git log --oneline commands.txt
git log --grep  say