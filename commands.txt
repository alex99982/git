(workin directory) -> (index)-> (repository)

git config -h
git config --list   : show config
git config --system user.name "alex"

git config  --global alias.c config

git config  --global alias.commitall "git add .;git commit"
-----------------------------------------
git config --global — позволяет настроить параметры Git глобально, для всех репозиториев пользователя.
alias.c — определяет новый алиас с именем c.
config — указывает, что алиас c будет выполнять команду git config.

git init
git status
git add .
git add -f ./ == добавить все равно не смотря на 

git show --pretty=fuller
git commit --author='Alexx' --date="..."
git commit -am "...."
git commit -m "...." index.html закомитеть конкретный файл


git rm i.gitignore = rm gitignore+ git add
git rm  --cached i.gitignore удалить из индекса  не удалять из каталога

git branch -v



git branch feature : создать ветку

git checkout -b feature : создать ветку и переключиться на нее

git checkout -f feature : переключает на ветку не сохраняя измененные данные в другой ветке
git checkout -f HEAD : очистить все изменения
git stach : сохранить изменени=я чтоб можно было переключиться
git stach pop  : восстановить измененые данные

git branch -f master  642ac75 : переместить master на коомит 642ac75

cat .git/ORIG_HEAD
git merge fix
git checkout -B master fix

git branch -f master ORIG_HEAD

git branch -d fix (удаление)
git branch -D feature (удаление принудительное если ветка не слита)
git branch -b feature C2d5 (Востановление)

------------------------------------------------------------------------------
cat ./git/logs/HEAD
git reflog master (история переключения веток)
git reflog --date=iso

git reflog -4 (последние 4 записи)

git log --oneline -g
git branch fix HEAD@{18} востановление ветки
git checkout - (переход на прошлую ветку)

------------------------------4.1 Git – Удаление "лишних" файлов и незакоммиченных изменений--------------
git checkout -f (востановить отслеживаемы фалы )
git reset --hard

git clean -dxf (удалить не отслеживаемы файлы)

--------------------------------5.1 Git – Reset – Жесткий reset --hard: отмена изменений, удаление коммитов

git reset --hard @~   (workDir+  Index+  Repo+)
git reflog (4536 )
git reset --hard 4536 

git reset  @~   (workDir  Index+  Repo+)

git reset --soft @~   (workDir  Index  Repo+)
git add .
git commit 

---------------------------------6.1 Git – Просмотр – Сравнение коммитов, веток и не только: git diff-----------
git diff                        (отличие workDir и Index)
git diff @                      (отличие workDir и Repo)
git diff --cached               (отличие Index и Repo)
git diff @~1                    (отличие master и прошлый коммит)
git diff fix                    (отличие master и fix)
git diff fix1..fix              (отличие fix1 и fix)
git diff fix1...fix             (отличие fix1 и fix и общего предка)
git diff fix1:paht1 fix:path1   (отличие фйалов из коммитов)

6.2 Git – Просмотр – Вывод истории: git log, форматирование коммитов

git log --pretty=format:"%h %ad | %s" --date=short
git log master
git log fix..master --oneline 
git log --oneline commands.txt
git log --grep  say


-----------------------------------7.1 Git – Слияние – "Истинное" слияние и разрешение конфликтов в git merge------
(feature):ours (fix1):theirs  (05444):base (коммит где ветки разделились)
git merge fix1

(feature)  git merge-base fix1 (выводит коммит где ветки разделились)

git checkout --ours index.html          (выбрать вариант из ветки feature)
git checkout --theirs index.html        (выбрать вариант из ветки fix1)

git checkout --merge index.html         (показывает вариает слияния и конфлик между ними)

git reset --hard  (востановить)

git reset --merge   (востанавливает фалы которые внесены в индекс но не трогает те фалы в директории которые были измененны но не проиндексированы)
git merge --abort === git reset --merge

git show :1:index.html посмотреть вариант общего предка
git show :2:index.html посмотреть вариант текущей ветки  (feature)
git show :3:index.html посмотреть вариант сливаемое ветки (fix1)

git add index.html (добавить в индекс исправленный фариант после коммита)
git commit или git merge --continue

git show (показывает ветку предыдущего комита и коммит сливаемой ветки)  Merge: bd8e50c d5e4397
git show --first-parent
git diff
git diff HEAD^ отличие от первого родителя (^используеться только при коммитах слияния)
git diff @^2   отличие от второго родителя (^используеться только при коммитах слияния)
git diff~ переход тольок по текущей ветки

git branch --merge (показать ветки обединеные)
git branch --no-merge (показать ветки обединеные не обедененные)

git merge fix1 -m "comment to merge"

git log --oneline --first-parent (коммиты только по основной ветке)

отмена слияния 
git reset --hard @~
git branch -f feature @~


------------ Слияние – Семантические конфликты и их разрешение
git merge fix1 --no-commit   (слить ветки без коммита чтоб исправить файл)

сохранение веток с флагом --no-ff

git reset --hard ORIG_HEAD; откат

git merge --no-ff --no-edit fix1   слияние без перемотки (сохранение истории)

!!!!git merge --squash fix1   слияние без сохнанения истории


-------------------------------------Копирование коммитов: cherry-pick---------------------------------------

(master) git cherry-pick  2702 (копирование изменений с одной ветки на другую)

(master) git cherry-pick master..feature  (скопировать все коммиты из мастер в feature)

git cherry-pick --abort
git cherry-pick --continue
git cherry-pick --quit
---отмена cherry-pick
git reflog --no-decorate -3
git reset --hard @~
git reset --hard @~3


//////////////////////9.1 Git – Перемещение коммитов – Перебазирование вместо слияния: rebase

git rebase master 
git rebase --abort
git rebase --quit   (не возвращает HEAD) 
git rebase --skip  (пропустить коммит) 
git add .
git rebase --continue
cat ./git/ORIG_HEAD
git reset --hard ORIG_HEAD
git reflog  -10
git show --quiet feature -1

(feature)git rebase -x 'node script.js' master
( fix)git rebase --onto master feature (переместить ветку fix(которая находиться на feature) на ветку master)
git rebase --rebase-merges master  (при слиянии учитываються коммиты слияния на противоложных ветках)
git rebase -i master (Интерактивное перебазирование)
git rebase -i -autosquash master(Исправляем коммит посередине ветки: autosquash)


---------------------Отмена коммитов через revert – Обратные коммиты, revert(используеться если залито в публичную ветку) 
 git revert @
 git show @~1
 git show
 git revert A..B
 (merge master..feature) 3851
 (master)git revert 3851 -m 1(при отмене коммитом слияния когда нужно определиться по какой ветке отмена)
(при ведении старой ветке и ее дальнейшему слиянию git не будет использоват предыдущие общие коммиты, так как посчитаемт их залитимы)
git cherry-pick A123 2354 (залить те коммиты которые revert были отменены)


--------------------github
ssh-keygen -t rsa -b 4096 -C "your_email@example.com" 
git clone https://github.com/username/repository.git
git remote -v  Просмотр удаленных репозиториев
git remote show srcgit просомтр удаленной ветки
git remote add origin https://github.com/username/repository.git
git push -u origin master (Отправляет коммиты из локальной ветки master на ветку master в удалённом репозитории origin.)
(-u (или --set-upstream): Этот флаг устанавливает связь между вашей локальной веткой и удалённой веткой, к которой вы отправляете изменения. Это значит, что в будущем при выполнении команды git push или git pull Git будет автоматически знать, в какую ветку на удалённом репозитории нужно отправлять или откуда нужно получать изменения. Это упрощает работу, так как не нужно каждый раз указывать удалённую ветку.)
git pull
Для удаления удалённого репозитория используется команда:
git remote remove <имя-удаленного-репозитория>
